1. 

virtual function. how to implement(with syntax¡­ very detailed)
A class, if one member function is defined as virtual function, then there is a virtual function table formed for "the class". The table is stored in memory, and the class has an implicit pointer member pointing to the table. 
The table stored the address of all virtual functions in current class. If this class is a derived class, then these pointers may point to their own version of member functions, or if not implemented, to their parent class member functions. Everytime when an object of this class was instantiated, the object has an implicit pointer pointing to the table. When the obj member function was called by base class pointers, the compiler will follow the virtual pointer to find the virtual table and link to the right version of member functions. 

2. 

Implementation of virtual function


3. 

Dynamics cast and reinterpretation cast, examples, syntax of dynamics cast
T a = dynamic_cast<base*>(derived*) 
dynamic cast is only used to cast pointers or references of a class into its parent, derived or parallel classes.  
reinterpretation cast is dependant on compiler, but its general idea is to read the bits of one type of data as another type of data. An enforced tranformation. It should be very careful to use the reinterpretation cast. 

4. 

What are virtual functions? How is it implemented?"


5. 

Template method, how it works? can you separate the implementation and declaration?
All templates are inlined during compilation. should not separate the delaration and implementation, because inline is not the same as linking, and inline command will not ask compiler to find the linked .cpp file to search for the implementation. As a result, all template should be included in the header file. Or should be included in one .cpp file, if you are defining them locally. 


6. 

Class any {}

int main() {
any(3);\n
any(4.5);\n
any(string("hello"));}

how to define class any();
constructors for each type of input data. Or use template, but need to be careful that don't use specific function of a specific data type in the following statements, otherwise can not pass the compilation. 


7. 

What is Dynamic cast. What happened when you can not dynamic cast a pointer and reference?
pointer -  nullptr,   refrenece -   throw exception, bad_cast

8. 

What is the syntax of copy constructors and assignment operators overloading?
class ABC{
public:
	ABC() {}
	ABC(const ABC& d):first(d.first), second(d.second).... {} 
	ABC& operator=( const ABC& rhs) { first = rhs.first; ..... }
}



9. 

What is the syntax of copy constructors and assignment operators overloading?


10. 

What is Dynamic cast. What happened when you can not dynamic cast a pointer and reference?


11. 

Given an array of integer, find two numbers with summation equal a fixed number A, what if you cannot use extra data structures. 
hashmap

12. 

vector. how to maintain. double the size. What is the complexity of insertion? 


13. 

Dynamics cast and reinterpretation cast, examples, syntax of dynamics cast


14. 

Dynamics cast and reinterpretation cast, examples, syntax of dynamics cast


15. 




16. 

Map and Hash-map
rb tree, hashtable 


17. 

virtual inheritance, pure virtual function, abstract class, 


18. 

How STL vector works? What is time complexity of push_back()
o1
armotized


19. 

Array and vector, how vector increases, complexity of adding one element to vector


20. 

When exceptions are a hiararchy of classes, how to manage the order of catch sentences?  
